package sets

import "fmt"

type Set[T comparable] map[T]struct{}

func (s *Set[T]) Add(elems ...T) {
    if s == nil || *s == nil {
        *s = make(Set[T])
    }
    for _, elem := range elems {
        (*s)[elem] = struct{}{}
    }
}

func (s *Set[T]) Remove(elems ...T) {
    if s == nil || *s == nil {
        *s = make(Set[T])
        return
    }
    for _, elem := range elems {
        delete(*s, elem)
    }
}

func (s *Set[T]) Contains(elem T) bool {
    if s == nil || *s == nil {
        *s = make(Set[T])
        return false
    }
    _, ok := (*s)[elem]
    return ok
}

func (s *Set[T]) Len() int {
    if s == nil || *s == nil {
        *s = make(Set[T])
        return 0
    }
    return len(*s)
}

func (s *Set[T]) IsEmpty() bool {
    return s.Len() == 0
}

func (s *Set[T]) Print() {
    ret := make([]T, s.Len())
    i := 0
    for k := range (*s) {
        ret[i] = k
        i++
    }
    fmt.Println(ret)
}

type Int32Set struct{Set[int32]}
type IntSet struct{Set[int]}
type Float32Set struct{Set[float32]}
type FloatSet struct{Set[float64]}
type StringSet struct{Set[string]}


