// Code generated by go2go; DO NOT EDIT.


//line /home/flo/projects/gosets/set.go2:1
package sets

//line /home/flo/projects/gosets/set.go2:1
import "fmt"

//line /home/flo/projects/gosets/set.go2:57
type Int32Set struct{ instantiate୦୦Set୦int32 }
type IntSet struct{ instantiate୦୦Set୦int }
type Float32Set struct{ instantiate୦୦Set୦float32 }
type FloatSet struct{ instantiate୦୦Set୦float64 }
type StringSet struct{ instantiate୦୦Set୦string }
//line /home/flo/projects/gosets/set.go2:61
type instantiate୦୦Set୦int32 map[int32]struct{}

//line /home/flo/projects/gosets/set.go2:7
func (s *instantiate୦୦Set୦int32,) Add(elems ...int32) {
	if s == nil || *s == nil {
		*s = make(instantiate୦୦Set୦int32)
	}
	for _, elem := range elems {
		(*s)[elem] = struct{}{}
	}
}

func (s *instantiate୦୦Set୦int32,) Remove(elems ...int32) {
	if s == nil || *s == nil {
		*s = make(instantiate୦୦Set୦int32)
		return
	}
	for _, elem := range elems {
		delete(*s, elem)
	}
}

func (s *instantiate୦୦Set୦int32,) Contains(elem int32) bool {
	if s == nil || *s == nil {
		*s = make(instantiate୦୦Set୦int32)
		return false
	}
	_, ok := (*s)[elem]
	return ok
}

func (s *instantiate୦୦Set୦int32,) Len() int {
	if s == nil || *s == nil {
		*s = make(instantiate୦୦Set୦int32)
		return 0
	}
	return len(*s)
}

func (s *instantiate୦୦Set୦int32,) IsEmpty() bool {
	return s.Len() == 0
}

func (s *instantiate୦୦Set୦int32,) Print() {
	ret := make([]int32, s.Len())
	i := 0
	for k := range *s {
		ret[i] = k
		i++
	}
	fmt.Println(ret)
}

//line /home/flo/projects/gosets/set.go2:55
type instantiate୦୦Set୦int map[int]struct{}

//line /home/flo/projects/gosets/set.go2:7
func (s *instantiate୦୦Set୦int,) Add(elems ...int) {
	if s == nil || *s == nil {
		*s = make(instantiate୦୦Set୦int)
	}
	for _, elem := range elems {
		(*s)[elem] = struct{}{}
	}
}

func (s *instantiate୦୦Set୦int,) Remove(elems ...int) {
	if s == nil || *s == nil {
		*s = make(instantiate୦୦Set୦int)
		return
	}
	for _, elem := range elems {
		delete(*s, elem)
	}
}

func (s *instantiate୦୦Set୦int,) Contains(elem int) bool {
	if s == nil || *s == nil {
		*s = make(instantiate୦୦Set୦int)
		return false
	}
	_, ok := (*s)[elem]
	return ok
}

func (s *instantiate୦୦Set୦int,) Len() int {
	if s == nil || *s == nil {
		*s = make(instantiate୦୦Set୦int)
		return 0
	}
	return len(*s)
}

func (s *instantiate୦୦Set୦int,) IsEmpty() bool {
	return s.Len() == 0
}

func (s *instantiate୦୦Set୦int,) Print() {
	ret := make([]int, s.Len())
	i := 0
	for k := range *s {
		ret[i] = k
		i++
	}
	fmt.Println(ret)
}

//line /home/flo/projects/gosets/set.go2:55
type instantiate୦୦Set୦float32 map[float32]struct{}

//line /home/flo/projects/gosets/set.go2:7
func (s *instantiate୦୦Set୦float32,) Add(elems ...float32) {
	if s == nil || *s == nil {
		*s = make(instantiate୦୦Set୦float32)
	}
	for _, elem := range elems {
		(*s)[elem] = struct{}{}
	}
}

func (s *instantiate୦୦Set୦float32,) Remove(elems ...float32) {
	if s == nil || *s == nil {
		*s = make(instantiate୦୦Set୦float32)
		return
	}
	for _, elem := range elems {
		delete(*s, elem)
	}
}

func (s *instantiate୦୦Set୦float32,) Contains(elem float32) bool {
	if s == nil || *s == nil {
		*s = make(instantiate୦୦Set୦float32)
		return false
	}
	_, ok := (*s)[elem]
	return ok
}

func (s *instantiate୦୦Set୦float32,) Len() int {
	if s == nil || *s == nil {
		*s = make(instantiate୦୦Set୦float32)
		return 0
	}
	return len(*s)
}

func (s *instantiate୦୦Set୦float32,) IsEmpty() bool {
	return s.Len() == 0
}

func (s *instantiate୦୦Set୦float32,) Print() {
	ret := make([]float32, s.Len())
	i := 0
	for k := range *s {
		ret[i] = k
		i++
	}
	fmt.Println(ret)
}

//line /home/flo/projects/gosets/set.go2:55
type instantiate୦୦Set୦float64 map[float64]struct{}

//line /home/flo/projects/gosets/set.go2:7
func (s *instantiate୦୦Set୦float64,) Add(elems ...float64) {
	if s == nil || *s == nil {
		*s = make(instantiate୦୦Set୦float64)
	}
	for _, elem := range elems {
		(*s)[elem] = struct{}{}
	}
}

func (s *instantiate୦୦Set୦float64,) Remove(elems ...float64) {
	if s == nil || *s == nil {
		*s = make(instantiate୦୦Set୦float64)
		return
	}
	for _, elem := range elems {
		delete(*s, elem)
	}
}

func (s *instantiate୦୦Set୦float64,) Contains(elem float64) bool {
	if s == nil || *s == nil {
		*s = make(instantiate୦୦Set୦float64)
		return false
	}
	_, ok := (*s)[elem]
	return ok
}

func (s *instantiate୦୦Set୦float64,) Len() int {
	if s == nil || *s == nil {
		*s = make(instantiate୦୦Set୦float64)
		return 0
	}
	return len(*s)
}

func (s *instantiate୦୦Set୦float64,) IsEmpty() bool {
	return s.Len() == 0
}

func (s *instantiate୦୦Set୦float64,) Print() {
	ret := make([]float64, s.Len())
	i := 0
	for k := range *s {
		ret[i] = k
		i++
	}
	fmt.Println(ret)
}

//line /home/flo/projects/gosets/set.go2:55
type instantiate୦୦Set୦string map[string]struct{}

//line /home/flo/projects/gosets/set.go2:7
func (s *instantiate୦୦Set୦string,) Add(elems ...string) {
	if s == nil || *s == nil {
		*s = make(instantiate୦୦Set୦string)
	}
	for _, elem := range elems {
		(*s)[elem] = struct{}{}
	}
}

func (s *instantiate୦୦Set୦string,) Remove(elems ...string) {
	if s == nil || *s == nil {
		*s = make(instantiate୦୦Set୦string)
		return
	}
	for _, elem := range elems {
		delete(*s, elem)
	}
}

func (s *instantiate୦୦Set୦string,) Contains(elem string) bool {
	if s == nil || *s == nil {
		*s = make(instantiate୦୦Set୦string)
		return false
	}
	_, ok := (*s)[elem]
	return ok
}

func (s *instantiate୦୦Set୦string,) Len() int {
	if s == nil || *s == nil {
		*s = make(instantiate୦୦Set୦string)
		return 0
	}
	return len(*s)
}

func (s *instantiate୦୦Set୦string,) IsEmpty() bool {
	return s.Len() == 0
}

func (s *instantiate୦୦Set୦string,) Print() {
	ret := make([]string, s.Len())
	i := 0
	for k := range *s {
		ret[i] = k
		i++
	}
	fmt.Println(ret)
}

//line /home/flo/projects/gosets/set.go2:55
type Importable୦ int

//line /home/flo/projects/gosets/set.go2:55
var _ = fmt.Errorf
